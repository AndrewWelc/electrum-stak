## Installation/Upgrade

 1. Please note down your Electrum seed and keep a backup of Electrum wallet
 2. Remove prior version of Electrum and data directory contents
 3. Install new version of Electrum
 4. Recover wallet using your seed from Step 1
 5. The following settings need to be updated after launch:
    
    *Tools -> Preferences -> Fees Tab -> Set "Fees Estimation" to STATIC*<br>
    *Tools -> Preferences -> Fees Tab -> Set "Edit Fees Manually" Check Box (True)*<br>
    *Tools -> Preferences -> Appearance Tab -> Base Units -> set to STAK*<br>
    *Tools -> Preferences -> Fiat Tab -> Source -> set to StraksApi*<br>
    *Tools -> Preferences -> Fiat Tab -> Fiat Currency -> set to desired currency*<br>
    
## Version 3.1.3

 * Qt GUI: seed word auto-complete during restore
 * Android: fix some crashes
 * performance improvements (wallet, and Qt GUI)
 * hardware wallets: show debug message during device scan
 * Digital Bitbox: enabled BIP84 (p2wpkh) wallet creation
 * add regtest support (via --regtest flag)
 * other minor bugfixes and usability improvements
 * STRAKS blockchain specific modifications

## Version 3.1.2

 * Kivy/android: request PIN on startup
 * Improve OSX build process
 * Fix various bugs with hardware wallets
 * Other minor bugfixes

## Version 3.1.1

 * fix #4031: Trezor T support
 * partial fix #4060: proxy and hardware wallet can't be used together
 * fix #4039: can't set address labels
 * fix crash related to coinbase transactions
 * MacOS: use internal graphics card
 * fix openalias related crashes
 * speed-up capital gains calculations
 * hw wallet encryption: re-prompt for passphrase if incorrect
 * other minor fixes.

## Version 3.1.0

 * Memory-pool based fee estimation. Dynamic fees can target a desired
   depth in the memory pool. This feature is optional, and ETA-based
   estimates from Bitcoin Core are still available. Note that miners
   could exploit this feature, if they conspired and filled the memory
   pool with expensive transactions that never get mined. However,
   since the Electrum client already trusts an Electrum server with
   fee estimates, activating this feature does not introduce any new
   vulnerability. In addition, the client uses a hard threshold to
   protect itself from servers sending excessive fee estimates. In
   practice, ETA-based estimates have resulted in sticky fees, and
   caused many users to overpay for transactions. Advanced users tend
   to visit (and trust) websites that display memory-pool data in
   order to set their fees.
 * Capital gains: For each outgoing transaction, the difference
   between the acquisition and liquidation prices of outgoing coins is
   displayed in the wallet history. By default, historical exchange
   rates are used to compute acquisition and liquidation prices. These
   values can also be entered manually, in order to match the actual
   price realized by the user. The order of liquidation of coins is
   the natural order defined by the blockchain; this results in
   capital gain values that are invariant to changes in the set of
   addresses that are in the wallet. Any other ordering strategy (such
   as FIFO, LIFO) would result in capital gain values that depend on
   the presence of other addresses in the wallet.
 * Local transactions: Transactions can be saved in the wallet without
   being broadcast. The inputs of local transactions are considered as
   spent, and their change outputs can be re-used in subsequent
   transactions. This can be combined with cold storage, in order to
   create several transactions before broadcasting them. Outgoing
   transactions that have been removed from the memory pool are also
   saved in the wallet, and can be broadcast again.
 * Checkpoints: The initial download of a headers file was replaced
   with hardcoded checkpoints. The wallet uses one checkpoint per
   retargeting period. The headers for a retargeting period are
   downloaded only if transactions need to be verified in this period.
 * The 'privacy' and 'priority' coin selection policies have been
   merged into one. Previously, the 'privacy' policy has been unusable
   because it was was not prioritizing confirmed coins. The new policy
   is similar to 'privacy', except that it de-prioritizes addresses
   that have unconfirmed coins.
 * The 'Send' tab of the Qt GUI displays how transaction fees are
   computed from transaction size.
 * The wallet history can be filtered by time interval.
 * Replace-by-fee is enabled by default. Note that this might cause
   some issues with wallets that do not display RBF transactions until
   they are confirmed.
 * Watching-only wallets and hardware wallets can be encrypted.
 * Semi-automated crash reporting
 * The SSL checkbox option was removed from the GUI.
 * The Trezor T hardware wallet is now supported.
 * BIP84: native segwit p2wpkh scripts for bip39 seeds and hardware
   wallets can now be created when specifying a BIP84 derivation
   path. This is usable with Trezor and Ledger.
 * Windows: the binaries now include ZBar, and QR code scanning should work.
 * The Wallet Import Format (WIF) for private keys that was extended in 3.0
   is changed. Keys in the previous format can be imported, compatibility
   is maintained. Newly exported keys will be serialized as
   "script_type:original_wif_format_key".
 * BIP32 master keys for testnet once again have different version bytes than
   on mainnet. For the mainnet prefixes {x,y,Y,z,Z}|{pub,prv}, the
   corresponding testnet prefixes are   {t,u,U,v,V}|{pub,prv}.
   More details and exact version bytes are specified at:
   https://github.com/spesmilo/electrum-docs/blob/master/xpub_version_bytes.rst
   Note that due to this change, testnet wallet files created with previous
   versions of Electrum must be considered broken, and they need to be
   recreated from seed words.
 * A new version of the Electrum protocol is required by the client
   (version 1.2). Servers using older versions of the protocol will
   not be displayed in the GUI.

## Version 3.0.6
* Fix transaction parsing bug #3788

*(Please refer to the original [Electrum](https://github.com/spesmilo/electrum) repo for various issue tags)*
